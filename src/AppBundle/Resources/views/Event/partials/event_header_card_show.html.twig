{# Données d'entrée :
- userEventInvitation (EventInvitation) L'invitation à afficher (inclu l'événement concerné)
#}
{% set eventHeaderLayout = '' %}
{% if userEventInvitation.event.whereGooglePlaceId is not null %}
    {% set eventHeaderLayout = 'col-sm-8' %}
{% endif %}

<div class="row">
    <div class="col-xs-12 {{ eventHeaderLayout }}">
        <div class="well well-sm m-b-10">
            {% set creatorsNames = "" %}
            {% for creatorInvitation in userEventInvitation.event.creators %}
                {% set creatorsNames = creatorsNames~(loop.index > 1?', ')~ creatorInvitation.displayableName %}
            {% endfor %}
            {% if creatorsNames is not empty %}
                <div class="pull-right"><i><small>{{ "event.header.organised_by"|trans({"%creator%":creatorsNames}) }}</small></i></div>
            {% endif %}
            <dl>
                <dt class="p-b-5">{{ "event.form.description.label"|trans }}</dt>
                <dd>{% if userEventInvitation.event.description is not empty %}
                        {{ userEventInvitation.event.description|nl2br }}
                    {% else %}
                        <i class="text-muted">{{ "event.form.description.empty"|trans }}</i>
                    {% endif %}
                </dd>
            </dl>
        </div>
        <dl class="dl-horizontal">
            {% if userEventInvitation.creator or userEventInvitation.administrator or userEventInvitation.event.when is not empty %}
                <dt><i class="zmdi zmdi-calendar zmdi-hc-fw"></i> {{ "event.form.when.label"|trans }}</dt>
                <dd>
                    {% if userEventInvitation.event.when is empty %}
                        <div class="btn-group btn-group-xs">
                            <a href="{{ url('addEventModule', {'token': userEventInvitation.event.token,'type':constant('AppBundle\\Utils\\enum\\ModuleType::POLL_MODULE'),
                                'subtype':constant('AppBundle\\Utils\\enum\\PollModuleType::WHEN')}) }}" class="add-pollmodule-shortcut btn btn-icon-text waves-effect palette-Blue bg">
                                <i class="zmdi zmdi-plus-circle zmdi-hc-fw"></i> {{ "global.button.poll"|trans }}</a>
                            <a data-event-header-action="edit" data-event-header-action-target="#pmbblock_event_header" class="btn btn-default btn-icon-text waves-effect">
                                <i class="zmdi zmdi-edit zmdi-hc-fw"></i> {{ "global.button.set"|trans }}</a>
                            <a data-toggle="tooltip" title="{{ "event.form.when.tootlip.title"|trans }}" class="btn btn-default btn-icon-text waves-effect">
                                <i class="zmdi zmdi-info zmdi-hc-fw"></i></a>
                        </div>
                    {% else %}
                        {{ userEventInvitation.event.when|localizeddate }}
                    {% endif %}
                </dd>
            {% endif %}
            {% if userEventInvitation.creator or userEventInvitation.administrator or userEventInvitation.event.whereName is not empty %}
                <dt><i class="zmdi zmdi-pin zmdi-hc-fw"></i> {{ "event.form.whereName.label"|trans }}</dt>
                <dd>
                    {% if userEventInvitation.event.whereName is empty %}
                        <div class="btn-group btn-group-xs" role="group">
                            <a href="{{ url('addEventModule', {'token': userEventInvitation.event.token,'type':constant('AppBundle\\Utils\\enum\\ModuleType::POLL_MODULE'),
                                'subtype':constant('AppBundle\\Utils\\enum\\PollModuleType::WHERE')}) }}" class="add-pollmodule-shortcut btn btn-icon-text waves-effect palette-Green bg">
                                <i class="zmdi zmdi-plus-circle zmdi-hc-fw"></i> {{ "global.button.poll"|trans }}</a>
                            <a data-event-header-action="edit" data-event-header-action-target="#pmbblock_event_header" class="btn btn-default btn-icon-text waves-effect">
                                <i class="zmdi zmdi-edit zmdi-hc-fw"></i> {{ "global.button.set"|trans }}</a>
                            <a data-toggle="tooltip" title="{{ "event.form.whereName.tootlip.title"|trans }}" class="btn btn-default btn-icon-text waves-effect">
                                <i class="zmdi zmdi-info zmdi-hc-fw"></i></a>
                        </div>
                    {% else %}
                        {{ userEventInvitation.event.whereName }}
                    {% endif %}
                </dd>
            {% endif %}
            {% if userEventInvitation.creator or userEventInvitation.administrator or userEventInvitation.event.responseDeadline is not empty %}
                <dt>{{ "event.form.responseDeadline.label"|trans }}</dt>
                <dd>{{ userEventInvitation.event.responseDeadline is not null ? userEventInvitation.event.responseDeadline|localizeddate:'-' }}</dd>
            {% endif %}
            {# Todo: décommenter
             <dt>{{ "event.form.status.label"|trans }}</dt>
            <dd><span class="label label-info">{{ userEventInvitation.event.status|trans }}</span></dd>#}
        </dl>
        {# Todo: décommenter
        {% if userEventInvitation.event.invitationOnly %}
            <div class="text-danger">
                <i class="zmdi zmdi-close-circle"></i> {{ "event.form.invitationOnly.text.true"|trans }}
            </div>
        {% else %}
            <div class="text-success">
                <i class="zmdi zmdi-check"></i> {{ "event.form.invitationOnly.text.false"|trans }}
            </div>
        {% endif %}#}
        {% if userEventInvitation.event.guestsCanInvite %}
            <div class="text-success">
                <i class="zmdi zmdi-check"></i> {{ "event.form.guestsCanInvite.text.true"|trans }}
            </div>
        {% else %}
            <div class="text-danger">
                <i class="zmdi zmdi-close-circle"></i> {{ "event.form.guestsCanInvite.text.false"|trans }}
            </div>
        {% endif %}
    </div>
    {% if userEventInvitation.event.whereGooglePlaceId is not null %}
        <div class="col-xs-12 col-sm-4">
            <div id="eventShowGoogleMap" style="height: 200px;"></div>
        </div>
    {% endif %}
</div>


<script>
    var mapEventShow = null;
    var boundsEventShow = null;

    function initEventShowMap() {
        var mapDiv = document.getElementById('eventShowGoogleMap');
        if (mapDiv != null) {
            mapEventShow = new google.maps.Map(mapDiv, {
                center: {lat: 47, lng: 2.30},
                zoom: 6,
                scrollwheel: false
            });

            boundsEventShow = new google.maps.LatLngBounds();
            var service = new google.maps.places.PlacesService(mapEventShow);

            {% if userEventInvitation.event.whereGooglePlaceId != null %}

            var infowindow = new google.maps.InfoWindow();
            service.getDetails({
                    placeId: '{{ userEventInvitation.event.whereGooglePlaceId }}'
                }
                ,
                function (place, status) {
                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                        var marker = new google.maps.Marker({
                            map: mapEventShow,
                            position: place.geometry.location
                        });
                        {# Permet de s'assurer que la map est pas trop zoomée, a priori  le zoom du firbounds se fait en asynchrone,
                                            donc il faut choper un event, et ne le fait que au premier passage#}

                        google.maps.event.addListener(mapEventShow, 'bounds_changed', function (event) {
                            if (mapEventShow.getZoom() > 15 && mapEventShow.initialZoom == true) {
                                // Change max/min zoom here
                                mapEventShow.setZoom(15);
                                mapEventShow.initialZoom = false;
                            }
                        });
                        mapEventShow.initialZoom = true;
                        // Rendre le marker clickable avec le nom
                        google.maps.event.addListener(marker, 'click', function () {
                            infowindow.setContent(place.name);
                            infowindow.open(mapEventShow, this);
                        });
                        boundsEventShow.extend(place.geometry.location)
                        mapEventShow.fitBounds(boundsEventShow);
                    }
                }
            );
            {% endif %}
        }
    }

    $('.add-pollmodule-shortcut').on('click', function (e) {
        ajaxRequest(this, null, e, function (responseJSON, textStatus, jqXHR) {
            var eventModulesContainer = $('#eventModulesContainer');
            $(document).scrollTop($(eventModulesContainer).children().last().offset().top - 100);
            $('.grid').masonry('layout');
            LetterAvatar.transform();
        }, null, null);
    });
</script>

