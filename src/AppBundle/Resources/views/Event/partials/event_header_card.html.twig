{# Données d'entrée :
- userEventInvitation (EventInvitation) L'invitation à afficher (inclu l'événement concerné)
- eventForm (Form|null) Formulaire d'édition des information général de l'événement (si les droits le permettent)
- thread (Thread) Le fil de discussion de l'événement
- comments(Comment[]) Les commentaires appartenant au fil de discussion de l'événement
#}

<div class="card z-depth-1" id="event-header-card">
    {{ include('@App/Event/partials/event_header_card_header.html.twig', {'userEventInvitation':userEventInvitation, 'editEvent' : eventForm is not null }) }}

    <div class="card-body card-padding-sm">
        <div class="pmb-block m-0 p-0" id="pmbblock_event_header">
            {% if eventForm is not null %}
                <div class="text-right">
                    <ul class="actions">
                        <li><a id="event_header_edit_information" href="#eventEditModal" data-toggle="modal"><i class="zmdi zmdi-edit"></i></a></li>
                    </ul>
                </div>
            {% endif %}
            <div class="pmbb-body">
                {{ include("@App/Event/partials/event_header_card_show.html.twig", {'userEventInvitation':userEventInvitation}) }}
            </div>
        </div>
    </div>

    {% if thread is defined and thread is not null %}
        <div id="event_comment_thread" data-thread="{{ thread.id }}" class="commentable_thread wall-comment-list">
            {% include 'FOSCommentBundle:Thread:comments.html.twig' with {'comments':comments, 'thread':thread, 'view':'flat', 'userEventInvitation':userEventInvitation} %}
        </div>
    {% endif %}


    <script>
        $(document).ready(function () {
            if (typeof google === 'object' && typeof google.maps === 'object') {
                initEventShowMap();
            }

            if (typeof window.fos !== 'undefined' && typeof window.fos.Comment !== "undefined") {
                window.fos.Comment.thread_container = $('.commentable_thread ');
                window.fos.Comment.initializeListeners();
            }

            {% if  thread is defined and thread is not null %}
            /** Fonction pour eviter le double envoi de commentaire */
            $('#event_comment_thread')
                .on('fos_comment_add_comment', function (event, commentHtml) {
                    $('#event_comment_thread .fos_comment_submit > button[type=submit], #event_comment_thread .fos_comment_submit > input[type=submit]').removeAttr("disabled");
                })
                .on('fos_comment_submitting_form', function () {
                    $('#event_comment_thread .fos_comment_submit > button[type=submit], #event_comment_thread .fos_comment_submit > input[type=submit]').attr("disabled", "disabled");
                });
            {% endif %}
        });
    </script>
</div>
