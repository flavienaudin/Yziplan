{# Données d'entrée :
- pollProposal (PollProposal) La proposition à afficher
- userModuleInvitation (ModuleInvitaion) L'invitation du module de l'utilisateur
- moduleInvitations ([ModuleInvitaion]) les invitations du module
#}

<tr id="pp_display_row_{{ pollProposal.id }}">
    {# Affichage de la proposition ################################################################################################################################################################ #}
    <td>
        <div class="media">
            <div class="pull-right">
                {% if is_granted(constant('AppBundle\\Security\\PollProposalVoter::EDIT'), [pollProposal, userModuleInvitation])
                or is_granted(constant('AppBundle\\Security\\PollProposalVoter::DELETE'), [pollProposal, userModuleInvitation]) %}
                    <div class="media-object">
                        <div class="btn-group-vertical btn-group-xs" role="group" aria-label="...">
                            {% if is_granted(constant('AppBundle\\Security\\PollProposalVoter::EDIT'), [pollProposal, userModuleInvitation]) %}
                                <a href="{{ path('pollProposalEditionForm', {"pollProposalId":pollProposal.id, "moduleInvitationToken" : userModuleInvitation.token}) }}" role="button"
                                   id="getPPEditionForm_{{ pollProposal.id }}" class="btn btn-default"> <i class="zmdi zmdi-edit"></i></a>
                            {% endif %}
                            {% if is_granted(constant('AppBundle\\Security\\PollProposalVoter::DELETE'), [pollProposal, userModuleInvitation]) %}
                                <a href="{{ path('removePollProposal', {"pollProposalId":pollProposal.id, "moduleInvitationToken" : userModuleInvitation.token}) }}" role="button"
                                   id="removePP_{{ pollProposal.id }}" class="btn btn-default c-red"> <i class="zmdi zmdi-delete"></i></a>
                            {% endif %}
                        </div>
                        <script>
                            $('#getPPEditionForm_{{ pollProposal.id }}').on('click', function (e) {
                                e.preventDefault();
                                var $form = $(this);
                                if (!eventInvitationValid && askGuestName !== undefined) {
                                    askGuestName(e, submitGetPollProposalEditionForm, [$form, e, '{{ pollProposal.pollmodule.module.token }}', '{{ pollProposal.id }}']);
                                } else {
                                    submitGetPollProposalEditionForm([$form, e, '{{ pollProposal.pollmodule.module.token }}', '{{ pollProposal.id }}']);
                                }
                            });

                            function submitGetPollProposalEditionForm(params) {
                                var form = params[0];
                                var e = params[1];
                                var moduleToken = params[2];
                                var pollProposalId = params[3];

                                var moduleModalsContainer = $('#modal-container-block-' + moduleToken);


                                var modals = $(moduleModalsContainer).children('#pollProposalEdition_' + pollProposalId + '_modal_id');
                                if ($(modals).length > 0) {
                                    $(modals).first().modal('toggle');
                                } else {
                                    ajaxRequest(form, null, e, function (responseJSON, textStatus, jqXHR) {
                                        $(moduleModalsContainer).children('#pollProposalEdition_' + pollProposalId + '_modal_id').first().modal('show');
                                    }, null, null);
                                }
                            }

                            $('#removePP_{{ pollProposal.id }}').on('click', function (e) {
                                e.preventDefault();
                                var removePPLink = $(this);
                                if (!eventInvitationValid && askGuestName !== undefined) {
                                    askGuestName(e, deletePollProposalAction([removePPLink, e]));
                                } else {
                                    deletePollProposalAction([removePPLink, e]);
                                }
                            });
                            function deletePollProposalAction(params) {
                                var removePPLink = params[0];
                                var e = params[1];
                                swal({
                                    title: '{{ "pollmodule.alert.confirm_proposal_deletion.title"|trans }}',
                                    text: '{{ "pollmodule.alert.confirm_proposal_deletion.message"|trans }}',
                                    type: "warning",
                                    showCancelButton: true,
                                    confirmButtonColor: "#DD6B55",
                                    confirmButtonText: '{{ "global.button.delete"|trans }}',
                                    showLoaderOnConfirm: true
                                }).then(function () {
                                    ajaxRequest(removePPLink, null, e, function (responseJSON, textStatus, jqXHR) {
                                        if (responseJSON.hasOwnProperty('data') && responseJSON['data'].hasOwnProperty('pollProposalId')) {
                                            var pollProposalId = responseJSON['data']['pollProposalId'];
                                            $('#pp_display_row_' + pollProposalId).remove();
                                            var moduleModalsContainer = $('#modal-container-block-{{ userModuleInvitation.module.token }}');
                                            $(moduleModalsContainer).children('#pollProposalEdition_' + pollProposalId + '_modal_id').each(function () {
                                                $(this).remove();
                                            });
                                            if ($('#pp-row-group-{{ userModuleInvitation.module.token }} > tr').length === 1) {
                                                $('#pollModuleDisplayAllResult_{{ userModuleInvitation.module.token }}_button').hide();
                                            }
                                        }
                                    }, function (jqXHR, textStatus, errorThrown) {

                                    }, function (dataOrJqXHR, textStatus, jqXHROrErrorThrown) {
                                        $grid = $('.grid');
                                        if ($grid[0]) {
                                            $grid.masonry('layout');
                                        }
                                    });
                                });
                            }
                        </script>
                    </div>
                {% endif %}
            </div>
            <div class="media-body">
                {{ include('@App/Event/module/pollModulePartials/pollProposalGuestResponseRowDisplay_proposal.html.twig', {
                    "pollProposal":pollProposal,
                    "displayModal":"true"
                }) }}
            </div>
        </div>
    </td>

    {# Affichage du résultat ####################################################################################################################################################################### #}
    <td class="response-column">
        {{ include('@App/Event/module/pollModulePartials/pollProposalGuestResponseRowDisplay_result.html.twig', {
            "pollProposal":pollProposal,
            "moduleInvitations":moduleInvitations
        }) }}
    </td>

    {#  Affichage des votes ######################################################################################################################################################################## #}
    <td class="voting-column">
        {% if pollProposal.pollModule.votingType == constant('AppBundle\\Utils\\enum\\PollModuleVotingType::AMOUNT') %}
            {{ include('@App/Event/module/pollModulePartials/pollProposalGuestResponseRowDisplay_vote_amount.html.twig', {
                "pollProposal":pollProposal,
                "userModuleInvitation":userModuleInvitation,
                "moduleInvitations":moduleInvitations
            }) }}
        {% elseif pollProposal.pollModule.votingType == constant('AppBundle\\Utils\\enum\\PollModuleVotingType::RANKING') %}
            {{ include('@App/Event/module/pollModulePartials/pollProposalGuestResponseRowDisplay_vote_ranking.html.twig', {
                "pollProposal":pollProposal,
                "userModuleInvitation":userModuleInvitation,
                "moduleInvitations":moduleInvitations
            }) }}
        {% else %}{# Dans le cas d'un yes/maybe/no ou d'un yes/no #}
            {{ include('@App/Event/module/pollModulePartials/pollProposalGuestResponseRowDisplay_vote_yesno.html.twig', {
                "pollProposal":pollProposal,
                "userModuleInvitation":userModuleInvitation,
                "moduleInvitations":moduleInvitations
            }) }}
        {% endif %}
    </td>
</tr>
