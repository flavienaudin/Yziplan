{# Données d'entrée :
- pollProposal (PollProposal) La proposition à afficher
- userModuleInvitation (ModuleInvitaion) L'invitation du module de l'utilisateur
- moduleInvitations ([ModuleInvitaion]) les invitations (excepté celle de l'utilisateur) du module
#}


<tr id="pp_display_row_{{ pollProposal.id }}">
    <th class="pollproposal-column {#dt-body-nowrap #}p-l-5 p-r-5">
        <div class="media">
            <div class="pull-right">
                {% if pollProposal.creator == userModuleInvitation %}
                    <div class="media-object">
                        <div class="btn-group-vertical btn-group-xs" role="group" aria-label="...">
                            <a href="{{ path('pollProposalEditionForm', {"pollProposalId":pollProposal.id, "moduleInvitationToken" : userModuleInvitation.token}) }}" role="button"
                               id="getPPEditionForm_{{ pollProposal.id }}" class="btn btn-default"> <i class="zmdi zmdi-edit"></i></a> <a
                                    href="{{ path('removePollProposal', {"pollProposalId":pollProposal.id, "moduleInvitationToken" : userModuleInvitation.token}) }}" role="button"
                                    id="removePP_{{ pollProposal.id }}" class="btn btn-default c-red"> <i class="zmdi zmdi-delete"></i></a>
                        </div>
                        <script>
                            $('#getPPEditionForm_{{ pollProposal.id }}').on('click', function (e) {
                                e.preventDefault();
                                var moduleModalsContainer = $('#modal-container-block-{{ pollProposal.pollmodule.module.token }}');
                                var modals = $(moduleModalsContainer).children('#pollProposalEdition_{{ pollProposal.id }}_modal_id');
                                if ($(modals).length > 0) {
                                    $(modals).first().modal('toggle');
                                } else {
                                    ajaxRequest($(this), null, e, function (responseJSON, textStatus, jqXHR) {
                                        $(moduleModalsContainer).children('#pollProposalEdition_{{ pollProposal.id }}_modal_id').first().modal('show');
                                    }, null, null);
                                }
                            });
                            $('#removePP_{{ pollProposal.id }}').on('click', function (e) {
                                e.preventDefault();
                                var removePPLink = $(this);
                                swal({
                                    title: '{{ "pollmodule.alert.confirm_proposal_deletion.title"|trans }}',
                                    text: '{{ "pollmodule.alert.confirm_proposal_deletion.message"|trans }}',
                                    type: "warning",
                                    showCancelButton: true,
                                    confirmButtonColor: "#DD6B55",
                                    confirmButtonText: '{{ "global.button.delete"|trans }}',
                                    closeOnConfirm: true,
                                    showLoaderOnConfirm: true
                                }, function (isConfirm) {
                                    if (isConfirm) {
                                        ajaxRequest(removePPLink, null, e, function (responseJSON, textStatus, jqXHR) {
                                            if (responseJSON.hasOwnProperty('data') && responseJSON['data'].actionResult === true) {
                                                $('#pollmodule-table-{{ userModuleInvitation.module.token }}').DataTable()
                                                        .row($('#pp_display_row_{{ pollProposal.id }}'))
                                                        .remove().draw();
                                                //$('#pp_display_row_{{ pollProposal.id }}').remove();
                                                var moduleModalsContainer = $('#modal-container-block-{{ userModuleInvitation.module.token }}');
                                                $(moduleModalsContainer).children('#pollProposalEdition_{{ pollProposal.id }}_modal_id').each(function () {
                                                    $(this).remove();
                                                });
                                            }
                                        }, null, function () {
                                            $('.grid').masonry('layout');
                                        });
                                    }
                                });
                            });
                        </script>
                    </div>
                {% endif %}
            </div>
            <div class="media-body">
                <span {% if pollProposal.description is not empty %}data-toggle="tooltip" data-container="body" title="{{ pollProposal.description }}"{% endif %}>
                    {% for ppElt in pollProposal.pollProposalElements %}
                        {{ ppElt.pollElement.type==constant('AppBundle\\Utils\\enum\\PollElementType::DATETIME')?ppElt.value|localizeddate:ppElt.value }}
                        {% if not loop.last %}<br>{% endif %}
                    {% endfor %}
                </span>
            </div>
        </div>
    </th>
    <td class="voting-column dt-body-center">
        {% set responseValue = null %}
        {% set userPPResponse = pollProposal.pollProposalResponsesOfModuleInvitations([userModuleInvitation]) %}
        {% if userPPResponse|length == 1 %}
            {% set responseValue = (userPPResponse[0] is not null and userPPResponse[0].answer is not empty?userPPResponse[0].answer:null) %}
        {% endif %}
        {% if pollProposal.pollModule.votingType in [constant('AppBundle\\Utils\\enum\\PollModuleVotingType::YES_NO'), constant('AppBundle\\Utils\\enum\\PollModuleVotingType::YES_NO_MAYBE')] %}
            {% set sendRequestEvent = "change" %}
            <div class="btn-group-vertical btn-group-xs pollproposal-response" data-toggle="buttons" role="group">
                <label class="btn palette-Light-Green bg waves-effect {{ responseValue == constant("AppBundle\\Utils\\enum\\PollProposalResponse::YES")?'active' }}"> <input type="radio"
                                                                                                                                                                             autocomplete="off"
                                                                                                                                                                             name="pollProposalReponse_{{ pollProposal.id }}"
                                                                                                                                                                             value="{{ constant("AppBundle\\Utils\\enum\\PollProposalResponse::YES") }}"
                            {{ responseValue == constant("AppBundle\\Utils\\enum\\PollProposalResponse::YES")?'checked="checked"' }}> <i class="zmdi zmdi-thumb-up"></i> </label>
                {% if pollProposal.pollModule.votingType == constant('AppBundle\\Utils\\enum\\PollModuleVotingType::YES_NO_MAYBE') %}
                    <label class="btn palette-Amber bg waves-effect {{ responseValue == constant("AppBundle\\Utils\\enum\\PollProposalResponse::MAYBE")?'active' }}"> <input type="radio"
                                                                                                                                                                             autocomplete="off"
                                                                                                                                                                             name="pollProposalReponse_{{ pollProposal.id }}"
                                                                                                                                                                             value="{{ constant("AppBundle\\Utils\\enum\\PollProposalResponse::MAYBE") }}"
                                {{ responseValue == constant("AppBundle\\Utils\\enum\\PollProposalResponse::MAYBE")?'checked="checked"' }}> <i class="zmdi zmdi-thumb-up-down"></i> </label>
                {% endif %}
                <label class="btn palette-Red bg waves-effect {{ responseValue == constant("AppBundle\\Utils\\enum\\PollProposalResponse::NO")?'active' }}"> <input type="radio" autocomplete="off"
                                                                                                                                                                    name="pollProposalReponse_{{ pollProposal.id }}"
                                                                                                                                                                    value="{{ constant("AppBundle\\Utils\\enum\\PollProposalResponse::NO") }}"
                            {{ responseValue == constant("AppBundle\\Utils\\enum\\PollProposalResponse::NO")?'checked="checked"' }}> <i class="zmdi zmdi-thumb-down"></i> </label>
            </div>
            {% elseif pollProposal.pollModule.votingType == constant('AppBundle\\Utils\\enum\\PollModuleVotingType::AMOUNT') %}
            {% set sendRequestEvent = "blur" %}
            <label for="pollProposalReponse_{{ pollProposal.id }}" class="sr-only">{{ pollProposal.pollModule.votingType }}</label>
        <input type="text" class="input-sm w-100" name="pollProposalReponse_{{ pollProposal.id }}" min="0" value="{{ responseValue }}">
            <script>
                $(document).ready(function () {
                    var touchSpinInput = $("input[name='pollProposalReponse_{{ pollProposal.id }}']").TouchSpin({
                        min: 0,
                        initval: 0,
                        verticalbuttons: true,
                        verticalupclass: 'zmdi zmdi-plus zmdi-hc-fw',
                        verticaldownclass: 'zmdi zmdi-minus zmdi-hc-fw'
                    });
                    touchSpinInput.on('change', function () {
                        $(touchSpinInput).trigger('blur');
                    });
                });
            </script>
        {% endif %}
        <script>
            $("input[name='pollProposalReponse_{{ pollProposal.id }}']").on('{{ sendRequestEvent }}', function (e) {
                var data = {
                    'pollProposalId': {{ pollProposal.id }},
                    'userModuleInvitationToken': "{{ userModuleInvitation.token }}",
                    'value': $(this).val()
                };
                var icon = $(this).parent("label");
                var urlTarget = "{{ path('answerPollModuleProposal') }}";
                ajaxRequest(urlTarget, data, e, function (responseJSON, textStatus, jqXHR) {
                    {# autre façon d'animer ? #}
                    var animation = 'bounceIn';
                    icon.addClass('animated ' + animation);
                    setTimeout(function () {
                        icon.removeClass(animation);
                    }, 1000);
                }, null, null);
            });
        </script>
    </td>
    {% for otherGuestPollProposalResponse in pollProposal.pollProposalResponsesOfModuleInvitations(moduleInvitations) %}
        <td class="dt-body-center">
            {% if pollProposal.pollModule.votingType == constant('AppBundle\\Utils\\enum\\PollModuleVotingType::AMOUNT') %}
                {{ otherGuestPollProposalResponse is null or otherGuestPollProposalResponse.answer is null?0:otherGuestPollProposalResponse.answer }}
            {% else %}
                {% if otherGuestPollProposalResponse is not null %}
                    {% if otherGuestPollProposalResponse.answer == constant("AppBundle\\Utils\\enum\\PollProposalResponse::YES") %}
                        <span class="answer-thumb palette-Light-Green-100 bg c-lightgreen strong"><i class="zmdi zmdi-thumb-up"></i></span>
                    {% elseif otherGuestPollProposalResponse.answer == constant("AppBundle\\Utils\\enum\\PollProposalResponse::MAYBE") %}
                        <span class="answer-thumb palette-Amber-100 bg c-amber strong"><i class="zmdi zmdi-thumb-up-down"></i></span>
                    {% elseif otherGuestPollProposalResponse.answer == constant("AppBundle\\Utils\\enum\\PollProposalResponse::NO") %}
                        <span class="answer-thumb palette-Red-50 bg c-red strong"><i class="zmdi zmdi-thumb-up-down"></i></span>
                    {% else %}
                        <span class="answer-thumb c-bluegray"><i class="zmdi zmdi-help-outline zmdi-hc-fw"></i></span>
                    {% endif %}
                {% else %}
                    <span class="answer-thumb c-bluegray"><i class="zmdi zmdi-help-outline"></i></span>
                {% endif %}
            {% endif %}
        </td>
    {% endfor %}
    <td class="end-spacer"></td>{#end spacer#}
</tr>