<div class="card {% block moduleCardClass %}{% endblock %}" id="module-{{ module.token }}">
    {% if moduleForm is not null %}
        {{ form_start(moduleForm, {'action':path('displayEvent',{'token':module.event.token,'tokenEdition':module.event.tokenEdition}), 'attr':{'id':"moduleForm-"~module.token} }) }}
    {% endif %}
    <div class="card-header {% block moduleHeaderClass %}{% endblock %}" {% block moduleHeaderAttributs %}{% endblock %}>
        {% block moduleHeader %}
            <div class="row">
                <div class="col-xs-12 col-sm-10">
                    {% if moduleForm is not null %}
                        <div class="form-group">
                            {{ form_label(moduleForm.name, 'module.form.name.label', {'label_attr':{'class':'sr-only'}}) }}
                            <div class="fg-line">
                                {{ form_widget(moduleForm.name, {'attr':{'placeholder':'module.form.name.placeholder'}}) }}
                                {{ form_errors(moduleForm.name) }}
                            </div>
                        </div>
                    {% else %}
                        <h2>{{ module.name is not empty?module.name }}</h2>
                        <small>{{ module.description|nl2br|raw }}</small>
                    {% endif %}
                </div>
                <div class="col-xs-offset-10 col-sm-offset-0 col-xs-2">
                    <small class="pull-right"><a href="#">{{ "global.link.top"|trans }}</a></small>
                </div>
            </div>
        {% endblock moduleHeader %}
    </div>
    <div class="card-body card-padding {% block moduleInformationClass %}{% endblock %}" {% block moduleInformationAttributs %}{% endblock %}>
        {% block moduleInformation %}
            <ul class="tab-nav tn-justified tn-icon" role="tablist">
                <li role="presentation" class="active">
                    <a class="col-sx-6" href="#tab-1_{{ module.tokenEdition }}" aria-controls="tab-1" role="tab" data-toggle="tab"> <i class="zmdi zmdi-home icon-tab"></i> </a>
                </li>
                {% if moduleForm is not null %}
                    <li role="presentation">
                        <a class="col-xs-6" href="#tab-2_{{ module.tokenEdition }}" aria-controls="tab-2" role="tab" data-toggle="tab"> <i class="zmdi zmdi-settings icon-tab"></i> </a>
                    </li>
                {% endif %}
            </ul>

            <div class="tab-content p-20">
                <div role="tabpanel" class="tab-pane animated fadeIn in active" id="tab-1_{{ module.tokenEdition }}">
                    {% if moduleForm is not null %}
                        <div class="form-group">
                            {{ form_label(moduleForm.description, 'module.form.description.label', {'label_attr':{'class':'sr-only'}}) }}
                            <div class="fg-line">
                                {{ form_widget(moduleForm.description, {'attr':{'rows':3,'placeholder':'module.form.description.placeholder'}}) }}
                                {{ form_errors(moduleForm.description) }}
                            </div>
                        </div>
                    {% else %}
                        <dl>
                            <dt>Description</dt>
                            <dd>{{ module.description|nl2br|raw }}</dd>
                        </dl>
                        {% if module.paymentModule is not null %}
                            {#{{ include("@App/Event/module/displayPaymentModule.html.twig", {"module":module}) }}#}
                        {% endif %}
                    {% endif %}
                </div>

                {% if moduleForm is not null %}
                    <div role="tabpanel" class="tab-pane animated fadeIn" id="tab-2_{{ module.tokenEdition }}">
                        <div class="form-group">
                            {{ form_label(moduleForm.responseDeadline, 'module.form.responseDeadline.label') }}
                            <div class="form-inline fg-line">
                                {{ form_widget(moduleForm.responseDeadline, {'attr':{'class':'', 'placeholder':'module.form.responseDeadline.placeholder'}}) }}
                            </div>
                            {{ form_errors(moduleForm.responseDeadline) }}
                        </div>
                        <dl class="dl-horizontal">
                            <dt>Status</dt>
                            <dd>{{ module.status|trans }}</dd>
                        </dl>
                    </div>
                {% endif %}
            </div>

            {% if moduleForm is not null %}
                <div class="pull-right">
                    <a href="{{ path('removeEventModule', {'tokenEdition':module.tokenEdition}) }}" id="removeModule{{ module.tokenEdition }}" data-target="{{ module.token }}"
                       class="text-danger">{{ "global.button.delete"|trans }}</a>
                    <button type="submit" class="btn btn-primary waves-effect">{{ "global.button.save"|trans }}</button>
                </div>
            {% endif %}


        {% endblock moduleInformation %}
    </div>
    <div class="card-body card-padding {% block moduleBodyClass %}{% endblock %}" {% block moduleBodyAttributs %}{% endblock %}>
        {% block moduleBody %}
        {% endblock moduleBody %}
    </div>
    <div class="card-footer">
        {% block moduleFooter %}
        {% endblock moduleFooter %}
    </div>

    {% if moduleForm is not null %}
        {{ form_end(moduleForm) }}
    {% endif %}

    {% block JSmodule %}
        {% if moduleForm is not null %}
            <script>
                $('#removeModule{{ module.tokenEdition }}').on('click', function (e) {
                    e.preventDefault();
                    var removeModuleLink = $(this);
                    swal({
                        title: '{{ "module.alert.confirm_deletion.title"|trans }}',
                        text: '{{ "module.alert.confirm_deletion.message"|trans }}',
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#DD6B55",
                        confirmButtonText: '{{ "global.button.delete"|trans }}',
                        closeOnConfirm: true,
                        showLoaderOnConfirm: true
                    }, function (isConfirm) {
                        if (isConfirm) {
                            var preloader = $('.at-global-preloader');
                            $(preloader).show();
                            $.ajax({
                                url: $(removeModuleLink).attr("href"),
                                type: 'post'
                            }).done(function (response, textStatus, xhr) {
                                if (response.actionResult === true) {
                                    $('#module-{{ module.token }}').remove();
                                }
                            }).fail(function (jqXHR, textStatus, errorThrown) {
                                // nothing
                            }).always(function (responseDataOrJSON) {
                                if (responseDataOrJSON.responseJSON) {
                                    responseDataOrJSON = responseDataOrJSON.responseJSON;
                                }
                                if (responseDataOrJSON.messages) {
                                    var messages = responseDataOrJSON.messages;
                                    for (var messageType in messages) {
                                        if (messages.hasOwnProperty(messageType)) {
                                            messages[messageType].forEach(function (mess) {
                                                toastr[messageType](mess);
                                            });
                                        }
                                    }
                                }
                                $(preloader).hide();
                            });
                        }
                    });
                });

                $('form#moduleForm-{{ module.token }}').on("submit", function (e) {
                    e.preventDefault();
                    var preloader = $('.at-global-preloader');
                    $(preloader).show();
                    var $form = $(this);
                    $('.has-error').each(function () {
                        $(this).find("small.help-block").remove();
                        $(this).removeClass("has-error");
                    });
                    $.ajax({
                        url: $form.attr('action'),
                        type: $form.attr('method'),
                        data: $form.serialize()
                    }).done(function (responseData, textStatus, jqXHR) {
                        if (responseData.htmlContent) {
                            $('#module-{{ module.token }}').replaceWith(responseData.htmlContent);
                        }
                        autosize($('textarea'));
                        $('.clockpicker').clockpicker();
                        $('.datepicker').datetimepicker({
                            format: "DD/MM/YYYY",
                            locale: "fr",
                            widgetPositioning: {
                                horizontal: 'auto',
                                vertical: 'bottom'
                            }
                        });
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        var responseJSON = jqXHR.responseJSON;
                        if (responseJSON != undefined && responseJSON.formErrors) {
                            var formErrors = responseJSON.formErrors;
                            for (var fieldErrorName in formErrors) {
                                if (formErrors.hasOwnProperty(fieldErrorName)) {
                                    var inputField = $('input[name*=' + fieldErrorName + ']');
                                    inputField.parent().addClass("has-error");
                                    inputField.after('<small class="help-block">' + responseJSON.formErrors[fieldErrorName] + '</small>')
                                }
                            }
                        }
                    }).always(function (responseDataOrJSON) {
                        if (responseDataOrJSON.responseJSON) {
                            // In case of fail()
                            responseDataOrJSON = responseDataOrJSON.responseJSON;
                        }
                        if (responseDataOrJSON.messages) {
                            var messages = responseDataOrJSON.messages;
                            for (var messageType in messages) {
                                if (messages.hasOwnProperty(messageType)) {
                                    messages[messageType].forEach(function (mess) {
                                        toastr[messageType](mess);
                                    });
                                }
                            }
                        }
                        $(preloader).hide();
                    });
                });
            </script>
        {% endif %}
    {% endblock %}
</div>